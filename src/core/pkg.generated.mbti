// Generated using `moon info`, DON'T EDIT IT
package "ZSeanYves/MoonbitHTTP/core"

import(
  "ZSeanYves/MoonbitHTTP/transport"
)

// Values
fn _hex_to_int(String) -> Result[Int, String]

fn _int_to_hex(Int) -> String

fn _skip_hdr_in_no_body(String) -> Bool

fn body_bytes(Array[Byte]) -> Body

fn body_empty() -> Body

fn body_len(Body) -> Int

fn byte_slice(Array[Byte], Int, Int) -> Array[Byte]

fn bytes_to_utf8(Array[Byte], String) -> Result[String, String]

fn content_length_opt(Map[String, String]) -> Int?

fn copy_first(Array[Byte], Int) -> Array[Byte]

fn default_reason(Int) -> String

fn err_io(String) -> Error

fn err_proto(String) -> Error

fn err_user(String) -> Error

fn error_to_string(Herror) -> String

fn find_byte(Array[Byte], Byte) -> Int?

fn get_all_ci(Map[String, String], String) -> Array[String]

fn get_ci(Map[String, String], String) -> String?

fn has_token_ci(Map[String, String], String, String) -> Bool

fn header_get(Request, String) -> String?

fn ltrim_ascii(Array[Byte]) -> Array[Byte]

fn make_status(Int, String) -> Status

fn make_status_from(StatusCode) -> Status

fn norm_key(String) -> String

fn parse_chunk_size_line(String) -> Result[Int, String]

fn parse_content_length(Map[String, String]) -> Result[Int, String]

fn push_ascii(Array[Byte], String) -> Array[Byte]

fn req_line(Method, String, String) -> RequestLine

fn request_new(RequestLine, Map[String, String]) -> Request

fn resp_bytes(Int, String, Map[String, String], Array[Byte]) -> Response

fn resp_empty(Int, String, Map[String, String]) -> Response

fn rtrim_ascii(Array[Byte]) -> Array[Byte]

fn split_header_list(String, String) -> Array[String]

fn status(Int, String) -> Status

fn status_code_value(StatusCode) -> Int

fn status_no_body(Int) -> Bool

fn str_slice(String, Int, Int) -> String

fn trim_sp(String) -> String

fn write_ascii(@transport.Transport, String) -> Result[Unit, String]

// Errors
pub suberror Herror {
  Io(String)
  Proto(String)
  User(String)
}

// Types and methods
pub(all) enum Body {
  Empty
  Bytes(Array[Byte])
}

pub(all) struct Limits {
  max_headers : Int
  max_line : Int
  read_win : Int
  max_body : Int
}

pub(all) enum Method {
  GET
  POST
  PUT
  DELETE
  HEAD
  OPTIONS
  PATCH
  TRACE
  CONNECT
  Other(String)
}

pub(all) struct Request {
  line : RequestLine
  headers : Map[String, String]
  body : Body
}

pub(all) struct RequestLine {
  http_method : Method
  target : String
  version : String
}

pub(all) struct Response {
  status : Status
  headers : Map[String, String]
  body : Body
}

pub(all) struct Status {
  code : Int
  reason : String
}

pub(all) enum StatusCode {
  Continue
  SwitchingProtocols
  Processing
  EarlyHints
  OK
  Created
  Accepted
  NoContent
  PartialContent
  MultipleChoices
  MovedPermanently
  Found
  SeeOther
  NotModified
  TemporaryRedirect
  PermanentRedirect
  BadRequest
  Unauthorized
  Forbidden
  NotFound
  MethodNotAllowed
  RequestTimeout
  LengthRequired
  PayloadTooLarge
  URITooLong
  UnsupportedMediaType
  ExpectationFailed
  MisdirectedRequest
  UnprocessableContent
  UpgradeRequired
  TooManyRequests
  RequestHeaderFieldsTooLarge
  InternalServerError
  NotImplemented
  BadGateway
  ServiceUnavailable
  GatewayTimeout
  HTTPVersionNotSupported
}

pub(all) struct StatusLine {
  version : String
  code : Int
  reason : String
}

// Type aliases

// Traits

